
-- generated by elm_rs


module Hades exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type RealmId
    = Lobby
    | Realm (String)


realmIdEncoder : RealmId -> Json.Encode.Value
realmIdEncoder enum =
    case enum of
        Lobby ->
            Json.Encode.string "Lobby"
        Realm inner ->
            Json.Encode.object [ ( "Realm", Json.Encode.string inner ) ]

type ToBackendEnvelope
    = ForRealm (RealmId) (ToBackend)


toBackendEnvelopeEncoder : ToBackendEnvelope -> Json.Encode.Value
toBackendEnvelopeEncoder enum =
    case enum of
        ForRealm t0 t1 ->
            Json.Encode.object [ ( "ForRealm", Json.Encode.list identity [ realmIdEncoder t0, toBackendEncoder t1 ] ) ]

type ToBackend
    = Increment
    | Decrement


toBackendEncoder : ToBackend -> Json.Encode.Value
toBackendEncoder enum =
    case enum of
        Increment ->
            Json.Encode.string "Increment"
        Decrement ->
            Json.Encode.string "Decrement"

realmIdDecoder : Json.Decode.Decoder RealmId
realmIdDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Lobby" ->
                            Json.Decode.succeed Lobby
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map Realm (Json.Decode.field "Realm" (Json.Decode.string))
        ]

type ToFrontendEnvelope
    = Noop
    | Unauthorized
    | FromRealm (ToFrontend)


toFrontendEnvelopeDecoder : Json.Decode.Decoder ToFrontendEnvelope
toFrontendEnvelopeDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Noop" ->
                            Json.Decode.succeed Noop
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Unauthorized" ->
                            Json.Decode.succeed Unauthorized
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map FromRealm (Json.Decode.field "FromRealm" (toFrontendDecoder))
        ]

type ToFrontend
    = UpdateCounter (Int)
    | NewRealm (RealmId)


toFrontendDecoder : Json.Decode.Decoder ToFrontend
toFrontendDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map UpdateCounter (Json.Decode.field "UpdateCounter" (Json.Decode.int))
        , Json.Decode.map NewRealm (Json.Decode.field "NewRealm" (realmIdDecoder))
        ]


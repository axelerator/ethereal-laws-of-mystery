
-- generated by elm_rs


module Hades exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type RealmId
    = Lobby
    | Realm (String)


realmIdEncoder : RealmId -> Json.Encode.Value
realmIdEncoder enum =
    case enum of
        Lobby ->
            Json.Encode.string "Lobby"
        Realm inner ->
            Json.Encode.object [ ( "Realm", Json.Encode.string inner ) ]

type ToBackendEnvelope
    = ForRealm (RealmId) (ToBackend)
    | EnterRealm (RealmId)


toBackendEnvelopeEncoder : ToBackendEnvelope -> Json.Encode.Value
toBackendEnvelopeEncoder enum =
    case enum of
        ForRealm t0 t1 ->
            Json.Encode.object [ ( "ForRealm", Json.Encode.list identity [ realmIdEncoder t0, toBackendEncoder t1 ] ) ]
        EnterRealm inner ->
            Json.Encode.object [ ( "EnterRealm", realmIdEncoder inner ) ]

type ToBackend
    = ForLobby (ToLobby)
    | ForGame (ToGame)


toBackendEncoder : ToBackend -> Json.Encode.Value
toBackendEncoder enum =
    case enum of
        ForLobby inner ->
            Json.Encode.object [ ( "ForLobby", toLobbyEncoder inner ) ]
        ForGame inner ->
            Json.Encode.object [ ( "ForGame", toGameEncoder inner ) ]

type ToLobby
    = Increment
    | Decrement
    | StartGame


toLobbyEncoder : ToLobby -> Json.Encode.Value
toLobbyEncoder enum =
    case enum of
        Increment ->
            Json.Encode.string "Increment"
        Decrement ->
            Json.Encode.string "Decrement"
        StartGame ->
            Json.Encode.string "StartGame"

type ToGame
    = DrawFromPile


toGameEncoder : ToGame -> Json.Encode.Value
toGameEncoder enum =
    case enum of
        DrawFromPile ->
            Json.Encode.string "DrawFromPile"

realmIdDecoder : Json.Decode.Decoder RealmId
realmIdDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Lobby" ->
                            Json.Decode.succeed Lobby
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map Realm (Json.Decode.field "Realm" (Json.Decode.string))
        ]

type ToFrontendEnvelope
    = Noop
    | Unauthorized
    | FromRealm (ToFrontend)


toFrontendEnvelopeDecoder : Json.Decode.Decoder ToFrontendEnvelope
toFrontendEnvelopeDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Noop" ->
                            Json.Decode.succeed Noop
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Unauthorized" ->
                            Json.Decode.succeed Unauthorized
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map FromRealm (Json.Decode.field "FromRealm" (toFrontendDecoder))
        ]

type ToFrontend
    = ToLobbyFrontend (ToFrontendLobby)
    | ToGameFrontend (Transition)
    | EnteredGame (RealmId) (GameInfo)


toFrontendDecoder : Json.Decode.Decoder ToFrontend
toFrontendDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map ToLobbyFrontend (Json.Decode.field "ToLobbyFrontend" (toFrontendLobbyDecoder))
        , Json.Decode.map ToGameFrontend (Json.Decode.field "ToGameFrontend" (transitionDecoder))
        , Json.Decode.field "EnteredGame" (Json.Decode.succeed EnteredGame |> Json.Decode.andThen (\x -> Json.Decode.index 0 (realmIdDecoder) |> Json.Decode.map x) |> Json.Decode.andThen (\x -> Json.Decode.index 1 (gameInfoDecoder) |> Json.Decode.map x))
        ]

type ToFrontendLobby
    = UpdateCounter (Int)
    | GameStart (RealmId)


toFrontendLobbyDecoder : Json.Decode.Decoder ToFrontendLobby
toFrontendLobbyDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map UpdateCounter (Json.Decode.field "UpdateCounter" (Json.Decode.int))
        , Json.Decode.map GameStart (Json.Decode.field "GameStart" (realmIdDecoder))
        ]

type Transition
    = IDraw (CardContent)
    | TheyDraw


transitionDecoder : Json.Decode.Decoder Transition
transitionDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map IDraw (Json.Decode.field "IDraw" (cardContentDecoder))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "TheyDraw" ->
                            Json.Decode.succeed TheyDraw
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]

type CardContent
    = NumberCard (Int)
    | OperatorCard (Operator)
    | SwapOperators


cardContentDecoder : Json.Decode.Decoder CardContent
cardContentDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map NumberCard (Json.Decode.field "NumberCard" (Json.Decode.int))
        , Json.Decode.map OperatorCard (Json.Decode.field "OperatorCard" (operatorDecoder))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "SwapOperators" ->
                            Json.Decode.succeed SwapOperators
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]

type Operator
    = Plus
    | Minus
    | Times


operatorDecoder : Json.Decode.Decoder Operator
operatorDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Plus" ->
                            Json.Decode.succeed Plus
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Minus" ->
                            Json.Decode.succeed Minus
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "Times" ->
                            Json.Decode.succeed Times
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]

type alias GameInfo =
    { center : List (CardContent)
    }


gameInfoDecoder : Json.Decode.Decoder GameInfo
gameInfoDecoder =
    Json.Decode.succeed GameInfo
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "center" (Json.Decode.list (cardContentDecoder))))


